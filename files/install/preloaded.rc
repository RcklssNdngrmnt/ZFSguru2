#!/rescue/sh
#set -x

#
## ZFSguru Preloaded Boot Environment
## version 10
#

## VARIABLES

# script version
PRELOADED_VERSION="10"

# mountpoint locations
MP_NEWROOT="/dist"
MP_HIDDEN="${MP_NEWROOT}/hidden"
MP_DEV="/dev"
MP_MEDIA="/media/zfsguru"
MP_TEMP="/mnt"

# system image
SYSTEM_NAME="system.ufs.uzip"
SYSTEM_PATH="${MP_MEDIA}/${SYSTEM_NAME}"
SYSTEM_SHA512="${SYSTEM_PATH}.sha512"

# distribution files written to newroot
DIST_SOURCE="${MP_MEDIA}/zfsguru.dist"
DIST_DESTINATION="${MP_NEWROOT}/zfsguru.dist"
DIST_SHA512="${MP_NEWROOT}/zfsguru.sha512"
DIST_DEVICE="${MP_NEWROOT}/zfsguru.device"

# distribution configuration
CONFIG_DIST="${MP_MEDIA}/config-dist"

# profile configuration
CONFIG_PROFILE="${MP_MEDIA}/config-profile"

# note: tmpfs may run out of inodes, so tuning may be necessary
#TMPFS_PARAMETER="-o inodes=300000"
TMPFS_PARAMETER=""

# seconds to sleep to allow for device detection
SLEEP="2"

# enable rescue shell when failure encountered
RESCUESHELL="0"

# tag to start each announcement with
TAG="\n\e[1;33m[ZFSGURU-PRELOADED]\033[0m "


## FUNCTION

func_start()
{
 # Announce version
 echo -e "${TAG}Preloaded Boot Environment - version ${PRELOADED_VERSION}"

 # check for debug version
 if [ -r "/preloaded-debug.rc" ]
 then
  echo -e "${TAG}Activating DEBUG version!"
  ./preloaded-debug.rc
  exit $?
 fi

 # Initialize (devfs mounted at ${MP_DEV})
 func_initialize

 # Mount USB/CD media (will mount suitable media at ${MP_MEDIA})
 func_mountmedia

 # Initialize distribution (will install to ${MP_NEWROOT})
 func_distribution

 # Transfer control
 func_transfer

 # unhandled exit
 echo "ERROR: unhandled exit!"
 exit 1
}

func_initialize()
{
 # Re-mount root R/W, so that we can create necessary sub-directories
 mount -u -w /
 func_checkerror ${?} mountroot-rw
 # create directories
 mkdir -p ${MP_NEWROOT} && \
 mkdir -p ${MP_DEV} && \
 mkdir -p ${MP_MEDIA} && \
 mkdir -p ${MP_TEMP}
 func_checkerror ${?} mkdir
 # mount devfs
 mount -t devfs devfs ${MP_DEV}
 func_checkerror ${?} devfs
 if [ ${SLEEP} -gt 0 ]
 then
  echo -n "sleeping for ${SLEEP} seconds for device detection..."
  sleep ${SLEEP}
  echo "done"
 fi
}

func_mountmedia()
{
 echo -e "${TAG}Detecting ZFSguru devices..."
 DEV_GPT=`ls -1 ${MP_DEV}/gpt/* 2>${MP_DEV}/null`
 DEV_LABEL=`ls -1 ${MP_DEV}/label/* 2>${MP_DEV}/null`
 DEV_CD=`ls -1 ${MP_DEV}/iso9660/* 2>${MP_DEV}/null`
 FSTYPES="ufs cd9660 msdosfs"
 for DEVPATH in ${DEV_GPT} ${DEV_LABEL} ${DEV_CD}
 do
  for FSTYPE in ${FSTYPES}
  do
   mount -r -t ${FSTYPE} ${DEVPATH} ${MP_MEDIA} 2>${MP_DEV}/null
   if [ ${?} -eq 0 ]
   then
    printf "detected \033[1;37m${FSTYPE}\033[0m on \033[1;37m${DEVPATH}\033[0m"
    printf ", validating... "
    if [ -f "${SYSTEM_PATH}" ] && [ -f "${SYSTEM_SHA512}" ] && [ -f "${DIST_SOURCE}" ]
    then
     SHA512="/rescue/sha512"
     if [ -f "/sbin/sha512" ]
     then
      SHA512="/sbin/sha512"
     fi
     CHECKSUM1=`cat ${SYSTEM_SHA512} 2>${MP_DEV}/null`
     CHECKSUM2=`${SHA512} -qc "${CHECKSUM1}" ${SYSTEM_PATH} >${MP_DEV}/null`
     RV=${?}
     if [ ${RV} -eq 0 ]
     then
      printf "\033[1;32mVALID!\033[0m"
      echo
      return
     else
      printf "\033[1;31mINVALID!\033[0m"
      echo
      echo "CHECKSUM INVALID! MEDIA COULD BE CORRUPTED!"
     fi
    else
     printf "\033[1;31mINVALID!\033[0m"
     echo
     echo "${DEVPATH} does not contain a ZFSguru installation"
    fi
   fi
   # unmount media again
   umount -f ${MP_MEDIA} > /dev/null 2>&1
  done
  # after having tried all filesystems on the device without luck
  echo "rejected device: ${DEVPATH}"
 done
 # after having tried all devices without luck
 echo
 echo "ERROR: no valid device found to boot from!"
 echo
 echo "listing all devices with a label:"
 glabel status
 echo
 echo "ABORT - press ctrl-alt-del or reset button or continue on shell"
 echo
 /rescue/sh
 exit 1
}

func_distribution()
{
 echo -e "${TAG}Initializing distribution"
 echo -n "distribution type: "
 DIST=`cat ${DIST_SOURCE} 2>${MP_DEV}/null`

 # supported distributions
 SUPPORTEDDISTS="RoZ RoR RoR+union RoM livecd usb"

 # sanity
 UNKNOWNDIST=1
 for SUPPORTEDDIST in ${SUPPORTEDDISTS}
 do
  if [ "${SUPPORTEDDIST}" = "${DIST}" ]
  then
   UNKNOWNDIST=0
   break
  fi
 done
 if [ "${UNKNOWNDIST}" -eq "1" ]
 then
  echo
  echo "ERROR: unsupported distribution type '${DIST}' detected - ABORTING!"
  echo
  /rescue/sh
  exit 1
 fi

 # distribution types
 if [ "${DIST}" = "livecd" ]
 then
  func_distribution_livecd
 fi
 if [ "${DIST}" = "usb" ]
 then
  func_distribution_usb
 fi
 if [ "${DIST}" = "RoR" ]
 then
  func_distribution_ror
 fi
 if [ "${DIST}" = "RoR+union" ]
 then
  func_distribution_ror_union
 fi
 if [ "${DIST}" = "RoM" ]
 then
  func_distribution_rom
 fi

 # perform additional tasks shared by all distributions
 func_distribution_extra
}

func_distribution_livecd()
{
 printf "\033[1;37mLiveCD\033[0m"
 echo

 # install system image
 echo "installing system image [be patient]"

 # mount new root with tmpfs
 mount -t tmpfs ${TMPFS_PARAMETER} tmpfs ${MP_NEWROOT}
 func_checkerror ${?} mount-tmpfs-newroot

 # mount system image
 mdmfs -P -F ${SYSTEM_PATH} -o ro md.uzip ${MP_TEMP}
 func_checkerror ${?} mount-system-image

 # install system image to new root
 tar cPf - ${MP_TEMP} | tar x -C ${MP_NEWROOT} --strip-components 2 -f -
 func_checkerror ${?} tar-extract-system-image

 # unmount system image
 sync && \
 umount -f ${MP_TEMP} && \
 mdconfig -d -u 1
 func_checkerror ${?} unmount-system-image
}

func_distribution_usb()
{
 printf "\033[1;37mUSB\033[0m -> "
 func_distribution_ror
}

func_distribution_ror()
{
 printf "\033[1;37mRoot-on-RAM\033[0m"
 echo

 # install system image
 echo "installing system image [be patient]"
  
 # mount new root with tmpfs
 mount -t tmpfs ${TMPFS_PARAMETER} tmpfs ${MP_NEWROOT}
 func_checkerror ${?} mount-tmpfs-newroot

 # mount system image
 mdmfs -P -F ${SYSTEM_PATH} -o ro md.uzip ${MP_TEMP}
 func_checkerror ${?} mount-system-image

 # install system image to new root
 tar cPf - ${MP_TEMP} | tar x -C ${MP_NEWROOT} --strip-components 2 -f -
 func_checkerror ${?} tar-extract-system-image

 # unmount system image
 sync && \
 umount -f ${MP_TEMP} && \
 mdconfig -d -u 1
 func_checkerror ${?} unmount-system-image
}

func_distribution_ror_union()
{
 printf "\033[1;37mRoot-on-RAM + Union\033[0m"
 echo

 echo "to be enabled in a future version of ZFSguru"
 exit 1
}

func_distribution_rom()
{
 printf "\033[1;37mRoot-on-Media\033[0m"
 echo

 echo "to be enabled in a future version of ZFSguru"
 exit 1
}

func_distribution_extra()
{
 # copy distribution identification
 cp -p ${DIST_SOURCE} ${DIST_DESTINATION} && \
 cp -p ${SYSTEM_SHA512} ${DIST_SHA512}
 func_checkerror ${?} copy-distribution

 # write boot device file
 echo -n "${DEVPATH}" > ${DIST_DEVICE}

 # copy loader.conf from boot media
 cp -p ${MP_MEDIA}/boot/loader.conf ${MP_NEWROOT}/boot/
 func_checkerror ${?} copy-loader-configuration

 # copy distribution configuration
 if [ -d "${CONFIG_DIST}" ]
 then
  cp -Rp ${CONFIG_DIST}/* ${MP_NEWROOT}/
  func_checkerror ${?} copy-config-dist
 else
  echo "WARNING: no config-dist directory found on boot media!"
 fi

 # copy profile configuration
 if [ -d "${CONFIG_PROFILE}" ]
 then
  cp -Rp ${CONFIG_PROFILE}/* ${MP_NEWROOT}/
  func_checkerror ${?} copy-config-profile
 else
  echo "WARNING: no config-profile directory found on boot media!"
 fi

 # unmount media
 umount -f ${MP_MEDIA}
 func_checkerror ${?} umount-media
}

func_transfer()
{
 echo -e "${TAG}Transferring control..."
 kenv init_shell="/bin/sh"
 exit 0
}

func_checkerror()
{
 RV="${1}"
 NAME="${2}"
 if [ "${RV}" -ne "0" ]
 then
  printf "\033[1;31mERROR:\033[0m\033[1;37m ${NAME} \033[0m"
  printf "command exited with return value \033[1;37m${RV}\033[0m\n\n"
  if [ "${RESCUESHELL}" -gt "0" ]
  then
    echo "starting rescue shell"
    /rescue/sh
    echo
  fi
  echo "ABORTING BOOT SEQUENCE - REBOOT MANUALLY"
  exit 1
 fi
}

## START

func_start

exit 0
